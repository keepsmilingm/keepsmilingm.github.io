{"title":"React杂记（持续更新中）","uid":"a86028911b6e2a12ef38fa51903065cc","slug":"React","date":"2023-03-10T06:35:07.000Z","updated":"2023-10-10T09:48:44.060Z","comments":true,"path":"api/articles/React.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200401220041648.gif","content":"<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><h3 id=\"jsx\"><a href=\"#jsx\" class=\"headerlink\" title=\"jsx\"></a>jsx</h3><h3 id=\"STATE\"><a href=\"#STATE\" class=\"headerlink\" title=\"STATE\"></a>STATE</h3><p><strong>Hooks ——以 <code>use</code> 开头的函数——只能在组件或<a href=\"https://react.docschina.org/learn/reusing-logic-with-custom-hooks\">自定义 Hook</a> 的最顶层调用。</strong> 你不能在条件语句、循环语句或其他嵌套函数内调用 Hook。Hook 是函数，但将它们视为关于组件需求的无条件声明会很有帮助。在组件顶部 “use” React 特性，类似于在文件顶部“导入”模块。</p>\n<ul>\n<li><p>设置 state 请求一次新的渲染。</p>\n</li>\n<li><p>React 将 state 存储在组件之外，就像在架子上一样。</p>\n</li>\n<li><p>当你调用 <code>useState</code> 时，React 会为你提供<em>该次渲染</em> 的一张 state 快照。</p>\n</li>\n<li><p>变量和事件处理函数不会在重渲染中“存活”。每个渲染都有自己的事件处理函数。</p>\n</li>\n<li><p>每个渲染（以及其中的函数）始终“看到”的是 React 提供给<em>这个</em> 渲染的 state 快照。</p>\n</li>\n<li><p>你可以在心中替换事件处理函数中的 state，类似于替换渲染的 JSX。</p>\n</li>\n<li><p>过去创建的事件处理函数拥有的是创建它们的那次渲染中的 state 值。</p>\n</li>\n<li><p><strong>React 会使 state 的值始终”固定“在一次渲染的各个事件处理函数内部。</strong> 你无需担心代码运行时 state 是否发生了变化。</p>\n</li>\n<li><p><strong>一个 state 变量的值永远不会在一次渲染的内部发生变化，</strong> 即使其事件处理函数的代码是异步的</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n value<span class=\"token operator\">++</span>\n <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">/** value值即使在定时器时限内被改变，定时器结束后`alert`出的还是第一次\n触发handleSubmit时的值，如下拉选择，连续切换两次，第一个alert出的还是第\n一次切换时的值**/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>React 会等到事件处理函数中的所有代码都运行完毕再处理你的 state 更新。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> setNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number<span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span>number<span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 最后得到的number的值还是1，并不是3,因为函数未执行完毕，number的值未更新</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"在下次渲染前多次更新同一个-state（批处理）\"><a href=\"#在下次渲染前多次更新同一个-state（批处理）\" class=\"headerlink\" title=\"在下次渲染前多次更新同一个 state（批处理）\"></a>在下次渲染前多次更新同一个 state（批处理）</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> setNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">setNumber</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h2><p>组件的生命周期包含三个主要部分：</p>\n<ul>\n<li><strong>挂载：</strong> 组件被插入到DOM中。</li>\n<li><strong>更新：</strong> 组件被重新渲染，查明DOM是否应该刷新。</li>\n<li><strong>移除：</strong> 组件从DOM中移除。</li>\n</ul>\n<p>React提供生命周期方法，你可以在这些方法中放入自己的代码。我们提供<strong>will</strong>方法，会在某些行为发生之前调用，和<strong>did</strong>方法，会在某些行为发生之后调用。</p>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3><ul>\n<li><code>getInitialState(): object</code>在组件被挂载之前调用。状态化的组件应该实现这个方法，返回初始的state数据。</li>\n<li><code>componentWillMount()</code>在挂载发生之前立即被调用。</li>\n<li><code>componentDidMount()</code>在挂载结束之后马上被调用。需要DOM节点的初始化操作应该放在这里。</li>\n</ul>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><ul>\n<li><code>componentWillReceiveProps(object nextProps)</code>当一个挂载的组件接收到新的props的时候被调用。该方法应该用于比较<code>this.props</code>和<code>nextProps</code>，然后使用<code>this.setState()</code>来改变state。</li>\n<li><code>shouldComponentUpdate(object nextProps, object nextState): boolean</code>当组件做出是否要更新DOM的决定的时候被调用。实现该函数，优化<code>this.props</code>和<code>nextProps</code>，以及<code>this.state</code>和<code>nextState</code>的比较，如果不需要React更新DOM，则返回false。</li>\n<li><code>componentWillUpdate(object nextProps, object nextState)</code>在更新发生之前被调用。你可以在这里调用<code>this.setState()</code>。</li>\n<li><code>componentDidUpdate(object prevProps, object prevState)</code>在更新发生之后调用。</li>\n</ul>\n<h3 id=\"移除\"><a href=\"#移除\" class=\"headerlink\" title=\"移除\"></a>移除</h3><ul>\n<li><code>componentWillUnmount()</code>在组件移除和销毁之前被调用。清理工作应该放在这里。</li>\n</ul>\n<h3 id=\"挂载的方法（Mounted-Methods）\"><a href=\"#挂载的方法（Mounted-Methods）\" class=\"headerlink\" title=\"挂载的方法（Mounted Methods）\"></a>挂载的方法（Mounted Methods）</h3><p>_挂载的_复合组件也支持如下方法：</p>\n<ul>\n<li><code>getDOMNode(): DOMElement</code>可以在任何挂载的组件上面调用，用于获取一个指向它的渲染DOM节点的引用。</li>\n<li><code>forceUpdate()</code>当你知道一些很深的组件state已经改变了的时候，可以在该组件上面调用，而不是使用<code>this.setState()</code>。</li>\n</ul>\n<p>getinitialstate</p>\n<p>componentwillmount</p>\n<p>componentDidMount</p>\n<p>componentWillReceiveProps</p>\n<p>shouldComponentUpdate</p>\n<p>componentWillUpdate</p>\n<p>componentDidUpdate</p>\n<p>componentWillUnMount</p>\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><p>useEffect的含义：副作用钩子，用于处理组件中的副作用，用来取代生命周期函数。所谓的”副作用”就是指的是组件中状态或生命周期改变时在useEffect可监听到。</p>\n<p>如果熟悉class组件中生命周期方法，可以将useEffect视作coponentDidMount、componentDidUpdate和componentWillUnmount的组合体。</p>\n<p>useEffect使用的几种方式，根据第二个参数的情况而定</p>\n<ol>\n<li>无此参数：组件的任何更新，该 useEffect 对应的返回函数和函数都执行</li>\n<li>为空数组：只在<strong>componentDidMount</strong>执行一次，不监听组件的更新，</li>\n<li>数组中有具体依赖：对应的依赖数据，有变化的时候，才会执行（初始不会执行）</li>\n</ol>\n<h3 id=\"清除-effect\"><a href=\"#清除-effect\" class=\"headerlink\" title=\"清除 effect\"></a>清除 effect</h3><p>通常，组件卸载时需要清除 effect 创建的诸如订阅或计时器 ID 等资源。要实现这一点，useEffect 函数需返回一个清除函数。以下就是一个事件绑定的例子：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">,</span> setPosition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击了b'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mouseClickHandle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击了c'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>clientY\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> mouseClickHandle<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// return ()=>&#123;</span>\n    <span class=\"token comment\">//   console.log('点击了d')</span>\n    <span class=\"token comment\">//   document.removeEventListener('click', mouseClickHandle)</span>\n    <span class=\"token comment\">// &#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击了a'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token constant\">X</span>：<span class=\"token punctuation\">&#123;</span>position<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>position<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">&#125;</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> rootElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> rootElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行点击事件，可以看到打印结果如下：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/25115364-9312e8df854a36c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600/format/webp\"></p>\n<p>微信截图_20211207151814.png</p>\n<p>可以看到，当我第三次点击的时候，打印结果显示click事件被执行了两次，在这个示例中，意味着组件的每一次更新都会创建新的事件绑定，这很显然是不被允许的。<br>这个时候就需要使用<strong>清除函数</strong>，清除函数会在<strong>组件卸载前执行</strong>。另外，如果组件多次渲染（通常如此），则<strong>在执行下一个 effect 之前，上一个 effect 就已被清除</strong>。</p>\n<p>useEffect允许返回一个函数来解决上述问题：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击了b'</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mouseClickHandle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击了c'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n       <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>clientY\n     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> mouseClickHandle<span class=\"token punctuation\">)</span>\n   <span class=\"token comment\">// 在此处返回一个解绑函数即可</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击了d'</span><span class=\"token punctuation\">)</span>\n     document<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> mouseClickHandle<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击了a'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>当返回一个解绑函数后再次测试发现，在组件在执行下一个 effect 之前，上一个 effect 就已被清除（d在b之前打印可以印证这点）。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/25115364-54c96d9f97541d04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/709/format/webp\"></p>\n<p>微信截图_20211207152514.png</p>\n<p>下面再来印证上述提到的第二个参数为空数组的情况：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击了b'</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mouseClickHandle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击了c'</span><span class=\"token punctuation\">)</span>\n     <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n       <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>clientY\n     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> mouseClickHandle<span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击了d'</span><span class=\"token punctuation\">)</span>\n     document<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> mouseClickHandle<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'点击了a'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/25115364-115b342fcd42a28a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/765/format/webp\"></p>\n<p>可以看到，当第二个参数为空数组的时候，b和d都没有打印，说明此时useEffect并不被执行，执行的只是初始进入就绑定的事件。</p>\n","feature":true,"text":"ReactjsxSTATEHooks ——以 use 开头的函数——只能在组件或自定义 Hook 的最顶层调用。 你不能在条件语句、循环语句或其他嵌套函数内调用 Hook。Hook 是函数，但将它们视为关于组件需求的无条件声明会很有帮助。在组件顶部 “use” React 特性，...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"React","slug":"React","count":1,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":1,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#React\"><span class=\"toc-text\">React</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jsx\"><span class=\"toc-text\">jsx</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#STATE\"><span class=\"toc-text\">STATE</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E4%B8%8B%E6%AC%A1%E6%B8%B2%E6%9F%93%E5%89%8D%E5%A4%9A%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%90%8C%E4%B8%80%E4%B8%AA-state%EF%BC%88%E6%89%B9%E5%A4%84%E7%90%86%EF%BC%89\"><span class=\"toc-text\">在下次渲染前多次更新同一个 state（批处理）</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">组件生命周期</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%82%E8%BD%BD\"><span class=\"toc-text\">挂载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">更新</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E9%99%A4\"><span class=\"toc-text\">移除</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%82%E8%BD%BD%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88Mounted-Methods%EF%BC%89\"><span class=\"toc-text\">挂载的方法（Mounted Methods）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#useEffect\"><span class=\"toc-text\">useEffect</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B8%85%E9%99%A4-effect\"><span class=\"toc-text\">清除 effect</span></a></li></ol></li></ol>","author":{"name":"Abner","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/keepsmilingm","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"keep-alive的使用","uid":"8e824aa52ddbbaf8c82d0cbfb5a84f60","slug":"keep-alive的使用","date":"2023-03-10T06:35:07.000Z","updated":"2023-10-10T09:40:24.071Z","comments":true,"path":"api/articles/keep-alive的使用.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200401220041648.gif","text":"应用场景1、vue工程，很多时候希望页面不管怎么跳转，返回时候，页面都能保持之前的操作状态， 2、页面跳转不用每次都执行mounted，特别很多请求数据时候，都是从mounted发起，不需要每次跳转都执行一次请求数据。 这就需要使用vue的keep-alive缓存。 解决思路一、...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"Vue","slug":"Vue","count":2,"path":"api/categories/Vue.json"}],"tags":[{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"},{"name":"缓存","slug":"缓存","count":2,"path":"api/tags/缓存.json"}],"author":{"name":"Abner","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/keepsmilingm","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"微信小程序:app.js及index.js详解","uid":"3544a0d90b0e0c3822563e88d582f926","slug":"微信小程序学习：（二）app.js及index.js详解","date":"2023-03-10T06:35:07.000Z","updated":"2023-10-10T09:42:30.897Z","comments":true,"path":"api/articles/微信小程序学习：（二）app.js及index.js详解.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200401220041648.gif","text":"1、app.js这是小程序的入口，启动小程序时首先调用app.js。 App()注册小程序，然后内部按生命周期执行。 //app.js//注册小程序App(&#123; onLaunch: function () &#123; console.log(\"app.js初始化\") /...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Vue","slug":"Vue","count":2,"path":"api/categories/Vue.json"}],"tags":[{"name":"Vue","slug":"Vue","count":2,"path":"api/tags/Vue.json"},{"name":"缓存","slug":"缓存","count":2,"path":"api/tags/缓存.json"}],"author":{"name":"Abner","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/keepsmilingm","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}