{"title":"ES6总结（下）","uid":"94921aa9a74f7374b2a5c0d12ec8143a","slug":"ES6总结（下）","date":"2023-02-15T03:05:41.000Z","updated":"2023-02-15T03:18:12.836Z","comments":true,"path":"api/articles/ES6总结（下）.json","keywords":null,"cover":"https://source.unsplash.com/N4wqYiRZrLI/1200x628","content":"<p>本次的<strong>ES6语法的汇总</strong>总共分为<strong>上、中、下</strong>三篇，本篇文章为下篇。</p>\n<p>往期系列文章：</p>\n<ul>\n<li><a href=\"https://link.zhihu.com/?target=https://juejin.im/post/5d28422be51d457756536829\">谈谈ES6语法（汇总上篇）</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https://juejin.im/post/5d297442f265da1b74022ae9\">谈谈ES6语法（汇总中篇）</a></li>\n</ul>\n<p>客套话不多说了，直奔下篇的内容～</p>\n<h3 id=\"async函数\"><a href=\"#async函数\" class=\"headerlink\" title=\"async函数\"></a>async函数</h3><p>ES2017标准引入了<code>async</code>函数，使得异步操作更加方便。<code>async</code>函数是<code>Generator</code>函数的语法糖。不打算写Generator函数，感兴趣的话可以看<a href=\"https://link.zhihu.com/?target=http://es6.ruanyifeng.com/%23docs/generator\">文档</a>。与<code>Generator</code>返回值（Iterator对象）不同，<code>async</code>返回的是一个<code>Promise</code>对象。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p><code>async</code>函数<strong>返回一个Promise对象</strong>，可以使用<code>then</code>方法添加回调函数。当函数执行的时候，一旦遇到<code>await</code>就会先返回，<strong>等到异步操作完成，再接着执行函数体内后面的语句</strong>。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStockPriceByName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> symbol <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getStockSymbol</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> stockPrice <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getStockPrice</span><span class=\"token punctuation\">(</span>symbol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> stockPrice<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">getStockPriceByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'goog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>再来看几种情况加深下印象：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fun1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'fun1 result'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> result1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出 </span>\n<span class=\"token comment\">// 'fun1'</span>\n<span class=\"token comment\">// 'fun1 result'</span>\n<span class=\"token comment\">// 'end'</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fun2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'fun2 result'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出</span>\n<span class=\"token comment\">// 'fun2'</span>\n<span class=\"token comment\">// 'fun2 result'</span>\n<span class=\"token comment\">// 'end'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>正常情况下，<code>await</code>命令后面是一个<code>Promise</code>对象，返回该对象的结果。如果不是<code>Promise</code>对象，就直接返回对应的值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fun3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fun3 async'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'fun3 result'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> result3 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出</span>\n<span class=\"token comment\">// 'fun3'</span>\n<span class=\"token comment\">// undefined</span>\n<span class=\"token comment\">// 'end'</span>\n<span class=\"token comment\">// 'fun3 async'</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fun4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fun4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fun4 async'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fun4 result'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fun4 sync'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 输出</span>\n<span class=\"token comment\">// 'fun4'</span>\n<span class=\"token comment\">// 'fun4 async'</span>\n<span class=\"token comment\">// 'fun4 result'</span>\n<span class=\"token comment\">// 'fun4 sync'</span>\n<span class=\"token comment\">// 'end'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"模拟sleep\"><a href=\"#模拟sleep\" class=\"headerlink\" title=\"模拟sleep\"></a>模拟sleep</h3><p><code>JavaScript</code>一直没有休眠的语法，但是借助<code>await</code>命令就可以让程序停顿指定的时间。【await要配合async来实现】</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">interval</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// use</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">one2FiveInAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">one2FiveInAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1, 2, 3, 4, 5 每隔一秒输出数字</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"一道题\"><a href=\"#一道题\" class=\"headerlink\" title=\"一道题\"></a>一道题</h3><p>需求：使用<code>async await</code>改写下面的代码，使得输出的期望结果是每隔一秒输出<code>0, 1, 2, 3, 4, 5</code>，其中<code>i &lt; 5</code>条件不能变。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for(var i &#x3D; 0 ; i &lt; 5; i++)&#123;\n    setTimeout(function()&#123;\n        console.log(i);\n    &#125;,1000)\n&#125;\nconsole.log(i);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>之前我们讲过了用<a href=\"https://link.zhihu.com/?target=https://juejin.im/post/5d297442f265da1b74022ae9%23heading-18\">promise的方式</a>实现，这次我们用<code>async await</code>方式来实现：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const sleep &#x3D; (time) &#x3D;&gt; new Promise((resolve) &#x3D;&gt; &#123;\n    setTimeout(resolve, time);\n&#125;);\n\n(async () &#x3D;&gt; &#123;\n    for(var i &#x3D; 0; i &lt; 5; i++)&#123;\n        console.log(i);\n        await sleep(1000);\n    &#125;\n    console.log(i);\n&#125;)();\n&#x2F;&#x2F; 符合条件的输出 0, 1, 2, 3, 4, 5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"比较promise和async\"><a href=\"#比较promise和async\" class=\"headerlink\" title=\"比较promise和async\"></a>比较promise和async</h3><p>为什么只比较<code>promise</code>和<code>async</code>呢？因为这两个用得频繁，实在的才是需要的，而且<code>async语法</code>是<code>generator</code>的语法糖，<code>generator</code>的说法直接戳<a href=\"https://link.zhihu.com/?target=http://es6.ruanyifeng.com/%23docs/async%23%25E4%25B8%258E%25E5%2585%25B6%25E4%25BB%2596%25E5%25BC%2582%25E6%25AD%25A5%25E5%25A4%2584%25E7%2590%2586%25E6%2596%25B9%25E6%25B3%2595%25E7%259A%2584%25E6%25AF%2594%25E8%25BE%2583\">async与其他异步处理方法的比较</a>。</p>\n<p>两者上，<code>async语法</code>写法上代码量少，<a href=\"https://link.zhihu.com/?target=https://blog.csdn.net/weixin_42470791/article/details/82560734%23commentBox\">错误处理能力佳</a>，而且更有逻辑语义化。</p>\n<p>假定某个 DOM 元素上面，部署了一系列的动画，前一个动画结束，才能开始后一个。如果当中有一个动画出错，就不再往下执行，返回上一个成功执行的动画的返回值。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; promise\nfunction chainAnimationsPromise(elem, animations) &#123;\n\n  &#x2F;&#x2F; 变量ret用来保存上一个动画的返回值\n  let ret &#x3D; null;\n\n  &#x2F;&#x2F; 新建一个空的Promise\n  let p &#x3D; Promise.resolve();\n\n  &#x2F;&#x2F; 使用then方法，添加所有动画\n  for(let anim of animations) &#123;\n    p &#x3D; p.then(function(val) &#123;\n      ret &#x3D; val;\n      return anim(elem);\n    &#125;);\n  &#125;\n\n  &#x2F;&#x2F; 返回一个部署了错误捕捉机制的Promise\n  return p.catch(function(e) &#123;\n    &#x2F;* 忽略错误，继续执行 *&#x2F;\n  &#125;).then(function() &#123;\n    return ret;\n  &#125;);\n\n&#125;\n&#x2F;&#x2F; async await\nasync function chainAnimationsAsync(elem, animations) &#123;\n  let ret &#x3D; null;\n  try &#123;\n    for(let anim of animations) &#123;\n      ret &#x3D; await anim(elem);\n    &#125;\n  &#125; catch(e) &#123;\n    &#x2F;* 忽略错误，继续执行 *&#x2F;\n  &#125;\n  return ret;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"类class\"><a href=\"#类class\" class=\"headerlink\" title=\"类class\"></a>类class</h3><p>在<code>ES6</code>之前，是使用构造函数来模拟类的，现在有了关键字<code>class</code>了，甚是开心</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function Person() &#123;&#125;\nPerson.prototype.sayHello &#x3D; function()&#123;\n    console.log(&#39;Hi&#39;);\n&#125;;\nclass Person&#123;\n    sayHello()&#123;\n        console.log(&#39;Hi!&#39;);\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"constructor方法\"><a href=\"#constructor方法\" class=\"headerlink\" title=\"constructor方法\"></a>constructor方法</h3><p><code>constructor</code>方法是类的默认方法，通过<code>new</code>命令生成对象实例时，自动调用该方法，一个类中必须有<code>construtor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会默认添加。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Person&#123;&#125;\n&#x2F;&#x2F; 等同于\nclass Person&#123;\n    constructor()&#123;&#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>construtor</code>方法也就类似构造函数，在执行new的时候，先跑构造函数，再跑到原型对象上。</p>\n<h3 id=\"取值函数-getter-和存值函数-setter\"><a href=\"#取值函数-getter-和存值函数-setter\" class=\"headerlink\" title=\"取值函数(getter)和存值函数(setter)\"></a>取值函数(getter)和存值函数(setter)</h3><p>与ES5一样，在<strong>类</strong>的内部可以使用<code>get</code>和<code>set</code>关键字，对某个属性设置存值函数和取值函数，<strong>拦截该属性的存取行为</strong>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class MyClass &#123;\n    get prop() &#123;\n        return &#39;getter&#39;;\n    &#125;\n    set prop(value) &#123;\n        console.log(&#96;setter: $&#123; value &#125;&#96;)\n    &#125;\n&#125;\n\nlet inst &#x3D; new MyClass();\n\ninst.prop &#x3D; 123;\n&#x2F;&#x2F; &#39;setter: 123&#39;\n\nconsole.log(inst.prop);\n&#x2F;&#x2F; &#39;getter&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"this的指向\"><a href=\"#this的指向\" class=\"headerlink\" title=\"this的指向\"></a>this的指向</h3><p>类的方法内部如果含有<code>this</code>，它默认是指向类的实例。但是，必须非常小心，一旦单独使用该方法，很可能报错。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Person&#123;\n    constructor(job) &#123;\n        this.job &#x3D; job;\n    &#125;\n    printJob() &#123;\n        console.log(&#96;My job is $&#123; this.job &#125;&#96;);\n    &#125;\n  sayHi() &#123;\n    console.log(&#96;I love my job -- $&#123; this.job &#125;.&#96;)\n  &#125;\n&#125;\nconst person &#x3D; new Person(&#39;teacher&#39;);\nperson.printJob(); &#x2F;&#x2F; &#39;My job is teacher&#39;\nconst &#123; sayHi &#125; &#x3D; person;\nsayHi(); &#x2F;&#x2F; 报错: Uncaught TypeError: Cannot read property &#39;job&#39; of undefined<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的代码中，<code>sayHi</code>方法单独使用，<code>this</code>会指向该方法运行时所在的环境（由于class内部是严格模式，所以<code>this</code>实际上指向<code>undefined</code>）。</p>\n<p>修正上面的错误也很简单，也是我们在<code>react</code>开发中经常使用的一种手段：在调用构造函数实例化的时候直接绑定实例(this)，修改如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Person&#123;\n    constructor(job) &#123;\n        this.job &#x3D; job;\n        this.sayHi &#x3D; this.sayHi.bind(this);\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>ES5中继承的方式我之前有整理过–<a href=\"https://link.zhihu.com/?target=https://juejin.im/post/5d24bd835188250d3d60de4e\">JavaScript 中的六种继承方式</a>。</p>\n<p>ES6中的继承通过<code>extends</code>关键字实现，比ES5的实现继承更加清晰和方便了。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Point &#123;\n  constructor(x, y) &#123;\n    this.x &#x3D; x;\n    this.y &#x3D; y;\n  &#125;\n&#125;\n\nclass ColorPoint extends Point &#123;\n  constructor(x, y, color) &#123;\n    this.color &#x3D; color;\n  &#125;\n&#125;\n\nlet cp &#x3D; new ColorPoint(25, 8, &#39;green&#39;); &#x2F;&#x2F; 报错： Must call super constructor in derived class before accessing &#39;this&#39; or returning from derived constructor<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面这样写，不能继承构造函数里面的属性值和方法。需要在子类的构造函数中加上<code>super</code>关键字。改成下面这样即可：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Point &#123;\n  constructor(x, y) &#123;\n    this.x &#x3D; x;\n    this.y &#x3D; y;\n  &#125;\n&#125;\n\nclass ColorPoint extends Point &#123;\n  constructor(x, y, color) &#123;\n    super(x, y); &#x2F;&#x2F; 调用父类的construtor(x, y)，相当于ES5中的call。注意的是，super要放在子类构造函数的第一行\n    this.color &#x3D; color;\n  &#125;\n&#125;\n\nlet cp &#x3D; new ColorPoint(25, 8, &#39;green&#39;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"module模块\"><a href=\"#module模块\" class=\"headerlink\" title=\"module模块\"></a>module模块</h3><p>在ES6之前，社区制定了一些模块的加载的方案，最主要的有<code>CommonJS</code>和<code>AMD</code>两种。前者用于服务器，后者用于浏览器。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; CommonJS\nlet &#123; stat, exists, readFile &#125; &#x3D; require(&#39;fs&#39;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>ES6在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 <code>CommonJS</code>和<code>AMD</code>规范，成为浏览器和服务器通用的模块解决方案。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; ES6模块\nimport &#123; stat, exists, readFile &#125; from &#39;fs&#39;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>各种好处详细见<a href=\"https://link.zhihu.com/?target=http://es6.ruanyifeng.com/%23docs/module\">文档</a></p>\n<h3 id=\"export命令\"><a href=\"#export命令\" class=\"headerlink\" title=\"export命令\"></a>export命令</h3><p><code>export</code>命令用于规定模块的对外接口 。</p>\n<p><strong>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。</strong>你可以理解为一个命名空间～</p>\n<p>想要获取模块里面的变量，你就需要导出<code>export</code>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; profile.js\nconst name &#x3D; &#39;jia ming&#39;;\nconst sayHi &#x3D; function() &#123;\n    console.log(&#39;Hi!&#39;);\n&#125;\n\nexport &#123; name, sayHi &#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>还有一个<code>export default</code>命令，方便用户（开发者啦）不用阅读文档就能加载模块（实际上就是输出一个<code>default</code>变量，而这个变量在<code>import</code>的时候是可以更改的）：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; export-default.js\nexport default function () &#123;\n  console.log(&#39;foo&#39;);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其他模块加载该模块时，<code>import</code>命令可以<strong>为该匿名函数指定任意名字</strong>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; import-default.js\nimport customName from &#39;.&#x2F;export-default&#39;;\ncustomName(); &#x2F;&#x2F; &#39;foo&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"import命令\"><a href=\"#import命令\" class=\"headerlink\" title=\"import命令\"></a>import命令</h3><p><code>import</code>命令用于输入其他模块提供的功能。使用<code>export</code>命令定义了模块的对外接口以后，其他<code>JS</code>文件就可以通过<code>import</code>命令加载这个模块。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F; main.js\nimport &#123; name, sayHi &#125; from &#39;.&#x2F;profile.js&#39;;\n\nfunction printName() &#123;\n    console.log(&#39;My name is &#39; + name);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至此，本系列文章<strong>谈谈ES6语法</strong>已经写完，希望文章对读者有点点帮助。本系列的内容是个人觉得在开发中比较重要的知识点，如果要详细内容的话，请上相关的文档查看～</p>\n<h3 id=\"参考和后话\"><a href=\"#参考和后话\" class=\"headerlink\" title=\"参考和后话\"></a>参考和后话</h3><ul>\n<li><a href=\"https://link.zhihu.com/?target=http://es6.ruanyifeng.com/\">阮一峰的ES6教程</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https://codepen.io/\">codepen 代码验证</a></li>\n</ul>\n<p>本次的<strong>ES6语法的汇总</strong>总共分为<strong>上、中、下</strong>三篇，本篇文章为下篇。</p>\n<ul>\n<li><a href=\"https://link.zhihu.com/?target=https://juejin.im/post/5d28422be51d457756536829\">谈谈ES6语法（汇总上篇）</a></li>\n<li><a href=\"https://link.zhihu.com/?target=https://juejin.im/post/5d297442f265da1b74022ae9\">谈谈ES6语法（汇总中篇）</a></li>\n</ul>\n<p>系列文章至此已经完结！</p>\n<p>文章首发在github上–<a href=\"https://link.zhihu.com/?target=https://github.com/reng99/blogs/issues/38\">谈谈ES6语法（汇总下篇）</a>。更多的内容，请戳<a href=\"https://link.zhihu.com/?target=https://github.com/reng99/blogs\">我的博客</a>进行了解，能留个star就更好了</p>\n","feature":true,"text":"本次的ES6语法的汇总总共分为上、中、下三篇，本篇文章为下篇。 往期系列文章： 谈谈ES6语法（汇总上篇） 谈谈ES6语法（汇总中篇） 客套话不多说了，直奔下篇的内容～ async函数ES2017标准引入了async函数，使得异步操作更加方便。async函数是Generator函...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"前端","slug":"前端","count":3,"path":"api/categories/前端.json"},{"name":"Javascript","slug":"前端/Javascript","count":3,"path":"api/categories/前端/Javascript.json"}],"tags":[{"name":"ES6","slug":"ES6","count":3,"path":"api/tags/ES6.json"},{"name":"Javascript","slug":"Javascript","count":3,"path":"api/tags/Javascript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#async%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">async函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">用法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%8B%9Fsleep\"><span class=\"toc-text\">模拟sleep</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E9%81%93%E9%A2%98\"><span class=\"toc-text\">一道题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AF%94%E8%BE%83promise%E5%92%8Casync\"><span class=\"toc-text\">比较promise和async</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BBclass\"><span class=\"toc-text\">类class</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#constructor%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">constructor方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%96%E5%80%BC%E5%87%BD%E6%95%B0-getter-%E5%92%8C%E5%AD%98%E5%80%BC%E5%87%BD%E6%95%B0-setter\"><span class=\"toc-text\">取值函数(getter)和存值函数(setter)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#this%E7%9A%84%E6%8C%87%E5%90%91\"><span class=\"toc-text\">this的指向</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">继承</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#module%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">module模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#export%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">export命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#import%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">import命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E5%92%8C%E5%90%8E%E8%AF%9D\"><span class=\"toc-text\">参考和后话</span></a></li></ol>","author":{"name":"Abner","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/keepsmilingm","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ES6总结（中）","uid":"788d899c6b4422522bb9706082cc38c8","slug":"ES6总结（中）","date":"2023-02-15T03:05:41.000Z","updated":"2023-02-15T03:16:01.434Z","comments":true,"path":"api/articles/ES6总结（中）.json","keywords":null,"cover":"https://img-blog.csdnimg.cn/20200401220041648.gif","text":"本次的ES6语法的汇总总共分为上、中、下三篇，本篇文章为中篇。 汇总上篇文章请戳这里–谈谈ES6语法（汇总上篇） 好了，我们直奔中篇的内容～ 数组扩展数组扩展运算符数组扩展运算符（spread）是三个点（...）。它好比rest参数的逆运算，将一个数组转为用空格分隔的参数序列。 ...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"前端","slug":"前端","count":3,"path":"api/categories/前端.json"},{"name":"Javascript","slug":"前端/Javascript","count":3,"path":"api/categories/前端/Javascript.json"}],"tags":[{"name":"ES6","slug":"ES6","count":3,"path":"api/tags/ES6.json"},{"name":"Javascript","slug":"Javascript","count":3,"path":"api/tags/Javascript.json"}],"author":{"name":"Abner","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"https://github.com/keepsmilingm","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}